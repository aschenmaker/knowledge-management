(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{266:function(t,a,s){"use strict";s.r(a);var r=s(28),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"随机访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机访问"}},[t._v("#")]),t._v(" 随机访问")]),t._v(" "),s("p",[s("strong",[t._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。")])]),t._v(" "),s("p",[t._v("数组属于线性表，并且分配于连续的内存空间和相同的数据类型。")]),t._v(" "),s("p",[t._v("这使得数组可以"),s("strong",[t._v("随机访问")]),t._v("，但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://lyneee-blog-1251928147.cos.ap-chengdu.myqcloud.com/blog/20200331206A6Fk6.png",alt:"数组"}})]),t._v(" "),s("p",[t._v("计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("_address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base_address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data_type_size\n")])])]),s("p",[t._v("数组支持随机访问，根据下标随机访问的时间复杂度为 O(1).")]),t._v(" "),s("h2",{attrs:{id:"插入与删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入与删除"}},[t._v("#")]),t._v(" 插入与删除")]),t._v(" "),s("h3",{attrs:{id:"插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("#")]),t._v(" 插入")]),t._v(" "),s("p",[t._v("如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。")]),t._v(" "),s("h3",{attrs:{id:"删除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[t._v("#")]),t._v(" 删除操作")]),t._v(" "),s("p",[t._v("跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。")]),t._v(" "),s("p",[t._v("和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。")]),t._v(" "),s("p",[t._v("实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。")])])}),[],!1,null,null,null);a.default=e.exports}}]);